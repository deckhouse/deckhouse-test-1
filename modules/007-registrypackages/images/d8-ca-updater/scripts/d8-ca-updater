#!/bin/sh -e
#
# d8-update-ca-certificates
#
# Centos and Debian based distributive use different way for install ca-certificates. 
# Centos based distro used /usr/share/pki/ca-trust-source/ca-bundle.trust.p11-kit file, that holds the complete Mozilla CA store. A system administrator can incorporate additional certificates simply by placing their PEM files under /etc/pki/ca-trust/source or /usr/share/pki/ca-trust-source directory and running companion command update-ca-trust to set things straight. Should the same certificate appear in both source directories but with different trust or policy settings, the dictates under /etc/pki/ca-trust/source prevail.
# Debian base distro ...



verbose=0
fresh=0
default=0

while [ $# -gt 0 ];
do
  case $1 in
    --verbose|-v)
      verbose=1;;
    --fresh|-f)
      fresh=1;;
    --default|-d)
      default=1
      fresh=1;;
    --certsconf)
      shift
      CERTSCONF="$1";;
    --certsdir)
      shift
      CERTSDIR="$1";;
    --localcertsdir)
      shift
      LOCALCERTSDIR="$1";;
    --certbundle)
      shift
      CERTBUNDLE="$1";;
    --etccertsdir)
      shift
      ETCCERTSDIR="$1";;
    --hooksdir)
      shift
      HOOKSDIR="$1";;
    --help|-h|*)
      echo "$0: [--verbose] [--fresh]"
      exit;;
  esac
  shift
done

if [ ! -s "$CERTSCONF" ]
then
  fresh=1
fi

detect_bundle(){
  . /etc/os-release
  case "$ID" in
    centos|rocky|almalinux|rhel)
      echo "centos" && exit 0 ;;
    ;;
    ubuntu|debian)
      echo "debian" && exit 0 ;;
    ;;
    "")
      >&2 echo "ERROR: Can't determine OS! No ID in /etc/os-release."
      exit 1
    ;;
  esac
}

BUNDLE="$(detect_bundle)"

if [ $BUNDLE == 'debian' ]; then
  update_ca_debian_bundle
elif [$BUNDLE == 'centos' ]; then
  update_ca_centos_bundle
fi

cleanup() {
  rm -f "$TEMPBUNDLE"
  rm -f "$ADDED"
  rm -f "$REMOVED"
}
trap cleanup 0

# Helper files.  (Some of them are not simple arrays because we spawn
# subshells later on.)
TEMPBUNDLE="${ETCCERTSDIR}/${CERTBUNDLE}.new"
ADDED="$(mktemp -p "${TMPDIR:-/tmp}" "ca-certificates.tmp.XXXXXX")"
REMOVED="$(mktemp -p "${TMPDIR:-/tmp}" "ca-certificates.tmp.XXXXXX")"

# Adds a certificate to the list of trusted ones.  This includes a symlink
# in /etc/ssl/certs to the certificate file and its inclusion into the
# bundle.
add() {
  CERT="$1"
  PEM="$ETCCERTSDIR/$(basename "$CERT" .crt | sed -e 's/ /_/g' \
                                                  -e 's/[()]/=/g' \
                                                  -e 's/,/_/g').pem"
  if ! test -e "$PEM" || [ "$(readlink "$PEM")" != "$CERT" ]
  then
    ln -sf "$CERT" "$PEM"
    echo "+$PEM" >> "$ADDED"
  fi
  # Add trailing newline to certificate, if it is missing (#635570)
  sed -e '$a\' "$CERT" >> "$TEMPBUNDLE"
}

remove() {
  CERT="$1"
  PEM="$ETCCERTSDIR/$(basename "$CERT" .crt).pem"
  if test -L "$PEM"
  then
    rm -f "$PEM"
    echo "-$PEM" >> "$REMOVED"
  fi
}

update_ca_debian_bundle() {

  local CERTSCONF=/etc/ca-certificates.conf
  local CERTSDIR=/usr/share/ca-certificates
  local LOCALCERTSDIR=/usr/local/share/ca-certificates
  local CERTBUNDLE=ca-certificates.crt
  local ETCCERTSDIR=/etc/ssl/certs
  local HOOKSDIR=/etc/ca-certificates/update.d

  cd "$ETCCERTSDIR"
  if [ "$fresh" = 1 ]; then
    echo "Clearing symlinks in $ETCCERTSDIR..."
    find . -type l -print | while read symlink
    do
      case $(readlink "$symlink") in
        $CERTSDIR*|$LOCALCERTSDIR*) rm -f $symlink;;
      esac
    done
    find . -type l -print | while read symlink
    do
      test -f "$symlink" || rm -f "$symlink"
    done
    echo "done."
  fi

  echo "Updating certificates in $ETCCERTSDIR..."

  # Add default certificate authorities if requested
  if [ "$default" = 1 ]; then
    find -L "$CERTSDIR" -type f -name '*.crt' | sort | while read crt
    do
      add "$crt"
    done
  fi

  # Handle certificates that should be removed.  This is an explicit act
  # by prefixing lines in the configuration files with exclamation marks (!).
  sed -n -e '/^$/d' -e 's/^!//p' "$CERTSCONF" | while read crt
  do
    remove "$CERTSDIR/$crt"
  done

  sed -e '/^$/d' -e '/^#/d' -e '/^!/d' "$CERTSCONF" | while read crt
  do
    if ! test -f "$CERTSDIR/$crt"
    then
      echo "W: $CERTSDIR/$crt not found, but listed in $CERTSCONF." >&2
      continue
    fi
    add "$CERTSDIR/$crt"
  done

  # Now process certificate authorities installed by the local system
  # administrator.
  if [ -d "$LOCALCERTSDIR" ]
  then
    find -L "$LOCALCERTSDIR" -type f -name '*.crt' | sort | while read crt
    do
      add "$crt"
    done
  fi

  ADDED_CNT=$(wc -l < "$ADDED")
  REMOVED_CNT=$(wc -l < "$REMOVED")

  if [ "$ADDED_CNT" -gt 0 ] || [ "$REMOVED_CNT" -gt 0 ]
  then
    # only run if set of files has changed
    # Remove orphan symlinks found in ETCCERTSDIR to prevent `openssl rehash`
    # from exiting with an error. See #895482, #895473.
    find $ETCCERTSDIR -type l ! -exec test -e {} \; -print | while read orphan
    do
      rm -f "$orphan"
      if [ "$verbose" = 1 ]; then
        echo "Removed orphan symlink $orphan"
      fi
    done
    if [ "$verbose" = 0 ]
    then
      openssl rehash . > /dev/null
    else
      openssl rehash -v .
    fi
  fi

  # chmod and mv only if TEMPBUNDLE exists or install may fail, #996005
  if [ -f "$TEMPBUNDLE" ]
  then
    chmod 0644 "$TEMPBUNDLE"
    mv -f "$TEMPBUNDLE" "$CERTBUNDLE"
    # Restore proper SELinux label after moving the file
    [ -x /sbin/restorecon ] && /sbin/restorecon "$CERTBUNDLE" >/dev/null 2>&1
  fi

  echo "$ADDED_CNT added, $REMOVED_CNT removed; done."

  if [ -d "$HOOKSDIR" ]
  then

    echo "Running hooks in $HOOKSDIR..."
    VERBOSE_ARG=
    [ "$verbose" = 0 ] || VERBOSE_ARG="--verbose"
    eval run-parts "$VERBOSE_ARG" --test -- "$HOOKSDIR" | while read hook
    do
      ( cat "$ADDED"
        cat "$REMOVED" ) | "$hook" || echo "E: $hook exited with code $?."
    done
    echo "done."

  fi

}

update_ca_centos_bundle() {
  set -vx
  if command -v p11-kit >/dev/null 2>&1; then
    >&2 echo "ERROR: p11-kit not found!"
    exit 1
  fi

  cd /usr/local/share/d8-ca-certificates/source-debian-ca-bundle/mozilla
  python3 certdata2pem.py

  /usr/share/ca-certificates/mozilla


  local DEST=/etc/pki/ca-trust/extracted

  # Prevent p11-kit from reading user configuration files.
  export P11_KIT_NO_USER_CONFIG=1

  # (BEGIN TRUSTED CERTIFICATE)
  /usr/bin/p11-kit extract --format=openssl-bundle --filter=certificates --overwrite --comment $DEST/openssl/ca-bundle.trust.crt
  /usr/bin/p11-kit extract --verbose --format=pem-bundle --filter=ca-anchors --overwrite --comment --purpose server-auth $DEST/pem/tls-ca-bundle.pem
  /usr/bin/p11-kit extract --verbose --format=pem-bundle --filter=ca-anchors --overwrite --comment --purpose email $DEST/pem/email-ca-bundle.pem
  /usr/bin/p11-kit extract --verbose --format=pem-bundle --filter=ca-anchors --overwrite --comment --purpose code-signing $DEST/pem/objsign-ca-bundle.pem
  /usr/bin/p11-kit extract --verbose --format=java-cacerts --filter=ca-anchors --overwrite --purpose server-auth $DEST/java/cacerts
  /usr/bin/p11-kit extract --verbose --format=edk2-cacerts --filter=ca-anchors --overwrite --purpose=server-auth $DEST/edk2/cacerts.bin
}

# vim:set et sw=2:
