{!{/*
  Multifile generator of deploy to channel workflows.

  One workflow file for each channel: deploy-alpha.yml, deploy-beta.yml, etc.

  The only reason to use separate files for each channel
  is a filtering on 'Actions' page.

*/}!}

{!{- range $channel := slice "alpha" "beta" "early-access" "stable" "rock-solid" -}!}
{!{-   $ctx := dict "channel" $channel }!}
{!{-   $outFile := printf "deploy-%s.yml" $channel }!}
{!{-   $outPath := filepath.Join (getenv "OUTDIR") (toLower $outFile) }!}
{!{-   tmpl.Exec "deploy_channel_workflow_template" $ctx | file.Write $outPath }!}
{!{- end -}!}

{!{- define "deploy_channel_workflow_template" -}!}
{!{- $channel := .channel -}!}
{!{- $workflowName := printf "Deploy to %s" $channel -}!}
name: '{!{ $workflowName }!}'

on:
  workflow_dispatch:
    inputs:
      issue_id:
        description: 'Id of issue where label was set'
        required: false
      issue_number:
        description: 'Number of issue where label was set'
        required: false
      comment_id:
        description: 'Id of comment in issue where to put workflow run status'
        required: false
      editions:
        description: 'Comma separated editions to deploy. Example: ee,fe,ce'
        required: false

env:
{!{ tmpl.Exec "werf_envs" | strings.Indent 2 }!}
  DEPLOY_CHANNEL: {!{ .channel }!}

# Note: no concurrency section for deploy workflows.

jobs:
{!{ tmpl.Exec "git_info_job" . | strings.Indent 2 }!}

  run_deploy:
    name: Deploy deckhouse to {!{ .channel }!} channel
    environment:
      name: {!{ .channel }!}
    needs:
      - git_info
    runs-on: [self-hosted, regular]
    steps:
{!{ tmpl.Exec "started_at_output" . | strings.Indent 6 }!}
{!{ tmpl.Exec "checkout_from_event_ref_step" . | strings.Indent 6 }!}
{!{ tmpl.Exec "update_comment_on_start" $workflowName | strings.Indent 6 }!}
{!{ tmpl.Exec "login_dev_registry_step" . | strings.Indent 6 }!}
{!{ tmpl.Exec "login_rw_registry_step" . | strings.Indent 6 }!}

      - name: Filter editions
        id: filter_editions
        env:
          EDITIONS: ${{ github.event.inputs.editions }}
        run: |
          echo "Input allowed editions: '${EDITIONS}'"

          RESTRICTED=no

          for edition in CE EE FE ; do
            if grep -i ",${edition}," <<<",${EDITIONS}," 2>/dev/null 1>&2 ; then
              echo "  - enable deploy of ${edition} edition."
              echo "::set-output name=DEPLOY_${edition}::yes"
              RESTRICTED=yes
            fi
          done

          if [[ $RESTRICTED == "no" ]] ; then
            echo "No restrictions. Enable deploy to all editions."
            for edition in CE EE FE ; do
              echo "::set-output name=DEPLOY_${edition}::yes"
            done
          fi

      - name: Check push enabled
        id: check_push
        env:
          SKIP_PUSH_FOR_DEPLOY: ${{secrets.SKIP_PUSH_FOR_DEPLOY}}
          REPO: ${{github.repository}}
        run: |
          if [[ ${REPO} == "deckhouse/deckhouse" ]]; then
            echo "::set-output name=enable::true"
          fi
          if [[ ${SKIP_PUSH_FOR_DEPLOY} != "true" ]]; then
            echo "::set-output name=enable::true"
          fi

{!{/*
Republish images from semver tag to channel tag:
  - Pull deckhouse images from dev registry.
  - Tag with channel name and push to dev and prod registries.
Images:
  - dev as deckhouse/<EDITION>:<CHANNEL>
  - dev/install as deckhouse/install/<EDITION>:<CHANNEL>
  - release-channel-version deckhouse/release-channel/<EDITION>:<CHANNEL>
Registries:
  - DECKHOUSE_REGISTRY_HOST - used as a source and as a destination
  - DEV_REGISTRY_PATH - used as a destination
Job supports running from forked or copied repo: 'ghcr.io/owner/repo'
is used if DECKHOUSE_REGISTRY_HOST is not set.
*/}!}
{!{ range $werfEnv := slice "CE" "EE" "FE" }!}
      - name: Publish release images for {!{ $werfEnv }!}
        if: ${{ steps.filter_editions.outputs.DEPLOY_{!{ $werfEnv }!} == 'yes' }}
        env:
          DECKHOUSE_REGISTRY_HOST: ${{secrets.DECKHOUSE_REGISTRY_HOST}}
          CI_COMMIT_TAG: ${{needs.git_info.outputs.ci_commit_tag}}
          WERF_ENV: {!{ $werfEnv }!}
          ENABLE_PUSH: ${{steps.check_push.outputs.enable}}
        run: |
          ## Source: .gitlab/ci_templates/deploy.yml

          # SRC_NAME is a name of image from werf.yaml.
          # SRC is a source image name.
          # DST is an image name for docker push.
          function pull_push_rmi() {
            SRC_NAME=$1
            SRC=$2
            DST=$3
            echo "‚öìÔ∏è üí´ [$(date -u)] Pull '${SRC_NAME}' image as ${SRC}."
            docker pull ${SRC}
            echo "‚öìÔ∏è üí´ [$(date -u)] Tag '${SRC_NAME}' image as ${DST}."
            docker image tag ${SRC} ${DST}

            if [[ ${ENABLE_PUSH} == "true" ]] ; then
              echo "‚öìÔ∏è üí´ [$(date -u)] Push '${SRC_NAME}' image as ${DST}."
              docker image push ${DST}
            else
              echo "‚öìÔ∏è [$(date -u)] SKIP_PUSH_FOR_DEPLOY=true, skip running 'docker image push ${DST}'."
            fi

            echo "‚öìÔ∏è [$(date -u)] Remove local tag for '${SRC_NAME}'."
            docker image rmi ${DST} || true;
          }

          # Some precautions.
          if [[ -z ${DEV_REGISTRY_PATH} ]] ; then
            echo "DEV_REGISTRY_PATH is not set!"
            exit 1
          fi
          if [[ -z ${WERF_ENV} ]] ; then
            echo "WERF_ENV is not set!"
            exit 1
          fi

          # Variables
          #   1. Edition and channel.
          # CE/EE/FE -> ce/ee/fe
          REGISTRY_SUFFIX=$(echo ${WERF_ENV} | tr '[:upper:]' '[:lower:]')
          RELEASE_CHANNEL={!{ $channel }!}

          echo "‚öìÔ∏è üí´ [$(date -u)] Start publishing Deckhouse images for '${REGISTRY_SUFFIX}' edition onto '${RELEASE_CHANNEL}' release channel."

          #   2. Prod registry: use github packages if DECKHOUSE_REGISTRY_HOST not set (run in the test repo).
          PROD_REGISTRY_PATH="${DECKHOUSE_REGISTRY_HOST}/deckhouse"
          if [[ -z "${DECKHOUSE_REGISTRY_HOST}" ]]; then
            PROD_REGISTRY_PATH="${GHA_TEST_REGISTRY_PATH}"
            echo "‚öìÔ∏è [$(date -u)] DECKHOUSE_REGISTRY_HOST is empty. Publish using Github Container Registry: '${PROD_REGISTRY_PATH}'"
          fi

          #   3. Prepare image names: republish CI_COMMIT_TAG tag images in dev-registry
          #   to RELEASE_CHANNEL tag image in prod registry.
          SOURCE_IMAGE=${PROD_REGISTRY_PATH}/${REGISTRY_SUFFIX}:${CI_COMMIT_TAG};
          PROD_IMAGE=${PROD_REGISTRY_PATH}/${REGISTRY_SUFFIX}:${RELEASE_CHANNEL};
          DEV_IMAGE=${DEV_REGISTRY_PATH}/${REGISTRY_SUFFIX}:${RELEASE_CHANNEL}

          SOURCE_INSTALL_IMAGE=${PROD_REGISTRY_PATH}/${REGISTRY_SUFFIX}/install:${CI_COMMIT_TAG};
          PROD_INSTALL_IMAGE=${PROD_REGISTRY_PATH}/${REGISTRY_SUFFIX}/install:${RELEASE_CHANNEL};
          DEV_INSTALL_IMAGE=${DEV_REGISTRY_PATH}/${REGISTRY_SUFFIX}/install:${RELEASE_CHANNEL}

          SOURCE_RELEASE_VERSION_IMAGE=${PROD_REGISTRY_PATH}/${REGISTRY_SUFFIX}/release-channel:${CI_COMMIT_TAG};
          PROD_RELEASE_VERSION_IMAGE=${PROD_REGISTRY_PATH}/${REGISTRY_SUFFIX}/release-channel:${RELEASE_CHANNEL};

          #   4. Publish to dev registry if DECKHOUSE_REGISTRY_HOST is set (run in the main repo).
          if [[ -n "${DECKHOUSE_REGISTRY_HOST}" ]]; then
            echo "‚öìÔ∏è [$(date -u)] Publish 'dev' image to dev-registry using tag ${RELEASE_CHANNEL}".
            pull_push_rmi 'dev' ${SOURCE_IMAGE} ${DEV_IMAGE}

            echo "‚öìÔ∏è [$(date -u)] Publish 'dev/install' image to dev-registry using tag ${RELEASE_CHANNEL}".
            pull_push_rmi 'dev/install' ${SOURCE_INSTALL_IMAGE} ${DEV_INSTALL_IMAGE}
          fi

          #   5. Publish prod images to rw registry.
          echo "‚öìÔ∏è [$(date -u)] Publish 'dev' image to rw-registry using tag ${RELEASE_CHANNEL}".
          pull_push_rmi 'dev' ${SOURCE_IMAGE} ${PROD_IMAGE}

          echo "‚öìÔ∏è [$(date -u)] Publish 'dev/install' image to rw-registry using tag ${RELEASE_CHANNEL}".
          pull_push_rmi 'dev/install' ${SOURCE_INSTALL_IMAGE} ${PROD_INSTALL_IMAGE}

          echo "‚öìÔ∏è [$(date -u)] Publish 'release-channel-version' image to rw-registry using tag ${RELEASE_CHANNEL}".
          pull_push_rmi 'release-channel-version' ${SOURCE_RELEASE_VERSION_IMAGE} ${PROD_RELEASE_VERSION_IMAGE}

          echo "‚öìÔ∏è [$(date -u)] Remove local source images."
          echo "  Delete local 'dev' source image ${SOURCE_IMAGE}"
          docker image rmi ${SOURCE_IMAGE} || true

          echo "  Delete local 'dev/install' source image ${SOURCE_INSTALL_IMAGE}"
          docker image rmi ${SOURCE_INSTALL_IMAGE} || true

          echo "  Delete local 'release-channel-version' source image ${SOURCE_RELEASE_VERSION_IMAGE}"
          docker image rmi ${SOURCE_RELEASE_VERSION_IMAGE} || true

          #   6. Report.
          echo "Deckhouse images published:"
          echo "  Source: ${SOURCE_IMAGE}"
          echo "  Prod: ${PROD_IMAGE}"
          echo "  Dev: ${DEV_IMAGE}"
          echo "Install images published:"
          echo "  Source: ${SOURCE_INSTALL_IMAGE}"
          echo "  Prod: ${PROD_INSTALL_IMAGE}"
          echo "  Dev: ${DEV_INSTALL_IMAGE}"
          echo "Release version image:"
          echo "  Source: ${SOURCE_RELEASE_VERSION_IMAGE}"
          echo "  Prod: ${PROD_RELEASE_VERSION_IMAGE}"

{!{- end }!}

      - name: Update release branch
        if: ${{ success() }}
        continue-on-error: true
        env:
          RELEASE_BRANCH_NAME: {!{ .channel }!}
        run: |
          echo "Update branch ${RELEASE_BRANCH_NAME} to SHA:${{ needs.git_info.outputs.github_sha }}. Actor is ${GITHUB_ACTOR}."

          git config --global user.name ${GITHUB_ACTOR}
          git config --global user.email ${GITHUB_ACTOR}'@users.noreply.github.com'
          git remote set-url origin https://x-access-token:${{secrets.BOATSWAIN_GITHUB_TOKEN}}@github.com/${{ github.repository }}
          git checkout -b "${RELEASE_BRANCH_NAME}"
          git push --force origin "${RELEASE_BRANCH_NAME}"

{!{ tmpl.Exec "update_comment_on_finish" (slice "job,final" $workflowName) | strings.Indent 6 }!}

{!{ end -}!}
